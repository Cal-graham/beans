{% extends "base.html" %}

{% block content %}

<div class="columns">
<div class="column is-12">
	{% if 'graphs' in args.keys() %}
	{% for graph in args['graphs'] %}
	<div class="box has-background-grey-darker">
		<div class="block" style="position: relative; height:{{80/args['graphs']|length}}vh; width:100vw">
		<canvas id="{{graph}}"></canvas>
		</div>
	</div>
	{% endfor %}
	{% endif %}
</div>
</div>

<script>

    var record_button = document.navbar['record'];
    var stop_button = document.navbar['stop'];
    stop_button.style.display = 'none';

    var profile_button = document.navbar['profile'];
    var end_button = document.navbar['end'];
    end_button.style.display = 'none';

    var recording = 0;
    var profiling = 0;
    var enable_refresh = 1;

    {% if 'graphs' in args.keys() %}
    {% for graph in args['graphs'] %}
    var {{graph}}_maintain = 0 
    {% endfor %}
    {% endif %}

    clear_graphs = function(min){
	{% if 'graphs' in args.keys() %}
        {% for graph in args['graphs'] %}
        while ({{graph}}.data.labels.length > min){
                {{graph}}.data.labels.shift();
                {{graph}}.data.datasets.forEach((dataset) => {
                        dataset.data.shift();
                });
        }
        //{{graph}}.data.datasets[0].data.push(0)
        {% endfor %}
        {% endif %}
    }

    record_button.onclick = function(){
	recording = 1;
	console.log(recording)
	record_button.style.display = 'none';
	stop_button.style.display = 'inline';
    }

    stop_button.onclick = function(){
        recording = 0;
	console.log(recording)
        stop_button.style.display = 'none';
        record_button.style.display = 'inline';
        clear_graphs(400);
    }

    profile_button.onclick = function(){
        profiling = 1;
	profile({'constant_temperature':1, 'constant_pressure':2})
        console.log(profiling)
        profile_button.style.display = 'none';
        end_button.style.display = 'inline';
    }

    end_button.onclick = function(){
	enable_refresh = 0;
	console.log('stopping...')
        profiling = 0;
        console.log(profiling)
	
        end_button.style.display = 'none';
        profile_button.style.display = 'inline';
	
	
        {% if 'graphs' in args.keys() %}
        {% for graph in args['graphs'] %}
	for (i = {{graph}}_maintain; i < {{graph}}.data.datasets.length; i++){
		{{graph}}.data.datasets.pop();
	}
        {% endfor %}
        {% endif %}
	
	$.get('/main/profile_disable')
	//init();
	console.log('stopped')
	enable_refresh = 1

    }
	 
    var chartColors = {
        pressure: ['rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)' ],
        flow: ['rgb(0, 100, 255)', 'rgb(0, 0, 255)'],
        temperature: ['rgb(255, 0, 100)', 'rgb(255, 100, 0)']
    };

    var color = Chart.helpers.color;
	
    var zeroDataSet = {
	data: [],
        label: "template",
	backgroundColor: chartColors.pressure[0],
        borderColor: chartColors.pressure[0],
        pointBorderColor: chartColors.pressure[0],
        pointBackgroundColor: chartColors.pressure[0],
        fill: true,
        pointRadius: 0,
        outerGlowWidth: 40,
        outerGlowColor: chartColors.pressure[0],
        shadowBlur: 10,
        shadowColor: chartColors.pressure[0]
    };
	    
    var baselineData = {
      labels: [''],
      datasets: [
	$.extend( true, {}, zeroDataSet),
	]
    };
	
    var lineOptions = {
        maintainAspectRatio: false,
        animation: false,
        layout: {
            padding:{
		left: 0,
		right: 0,
		top: 0,
		bottom: -10
	    }
        },
        scales:{
            xAxes: [{
                display: false
            }],
        },
        title: {
          display: false
        },
	elements: {
		point : {
			radius: 0
		}
	},
	legend: {
               	display: true,
		position: 'right'
	}
        }

    {% if 'graphs' in args.keys() %}
    {% for graph in args['graphs'] %}
	
    var {{graph}} = new Chart(document.getElementById("{{graph}}"), {
      type: 'line',
      data: $.extend( true, {}, baselineData),
      options: lineOptions,
    });
     
    {% endfor %}
    {% endif %}

    var refresh = function(){

	console.log('reading...')	

	while (enable_refresh == 0){
		sleep(100);
	}

	try{

        var requests = $.get('/main/read');
        var tm = requests.done(function(r){
		console.log(r)
		{% if 'graphs' in args.keys() %}
    		{% for graph in args['graphs'] %}
		var {{graph}}_ = 0
		{% endfor %}
    		{% endif %}
		temps = [];
       		for (const [key, value] of Object.entries(r)){
			
			{% if 'graphs' in args.keys() %}
    			{% for graph in args['graphs'] %}
			if (key.includes("{{graph}}") && enable_refresh == 1){
				console.log({{graph}}_)
				{{graph}}.data.datasets[{{graph}}_].data.push(value)
				{{graph}}_ = {{graph}}_ + 1				
				//console.log(key, lineChart0.data.datasets[{{graph}}_].data)
			}
                	{% endfor %}
                	{% endif %}
                        if (key.includes("time")){
	                        {% if 'graphs' in args.keys() %}
        	                {% for graph in args['graphs'] %}
                                {{graph}}.data.labels.push(value)
                                if ( (({{graph}}.data.labels.length > 400 && recording == 0) || {{graph}}.data.labels.length > 1000) && enable_refresh == 1  ){
                                        {{graph}}.data.labels.shift();
					{{graph}}_count = 0
                                        {{graph}}.data.datasets.forEach((dataset) => {
						//if ({{graph}}_count < {{graph}}_maintain){
                                                	dataset.data.shift();
							{{graph}}_count = {{graph}}_count + 1
						//}
                                        });
                                        //{{graph}}.data.datasets[0].data.push(0)
                                }
                        	{% endfor %}
                        	{% endif %}
                        }
		}
                {% if 'graphs' in args.keys() %}
                {% for graph in args['graphs'] %}
		{{graph}}.update();
		{% endfor %}
    		{% endif %}
	//sleep(500);
	//refresh();
	setTimeout(refresh, 100);
        });

	} catch(err) {

	console.log(err)
	refresh();

	}

    }
    
    var init = function(){
        var requests = $.get('/main/read');
        var tm = requests.done(function(r){
		{% if 'graphs' in args.keys() %}
    		{% for graph in args['graphs'] %}
		var {{graph}}_ = 0
		{% endfor %}
    		{% endif %}
		color = 'rgb(255,255,255)'
		temps = [];
       		for (const [key, value] of Object.entries(r)){
			{% if 'graphs' in args.keys() %}
    			{% for graph in args['graphs'] %}
			if (key.includes("{{graph}}")){
				add = $.extend( true, {}, zeroDataSet),
				add.label = key
				color = chartColors.{{graph}}[{{graph}}_]
				add.backgroundColor = color.replace(')', ', 0.10)').replace('rgb', 'rgba');
				add.borderColor = color
				add.pointBorderColor = color
				add.pointBackgroundColor = color
				add.fill = true
				add.pointRadius = 0
				add.outerGlowWidth = 40
				add.outerGlowColor = color
				add.shadowBlur = 10
				add.shadowColor = color
				{{graph}}.data.datasets[{{graph}}_] = (add)
				{{graph}}_ = {{graph}}_ + 1
				{{graph}}_maintain = {{graph}}_
			}
			{% endfor %}
    			{% endif %}
		}
		{% if 'graphs' in args.keys() %}
    		{% for graph in args['graphs'] %}
		{{graph}}.update();
		{% endfor %}
		console.log({{args['graphs'][-1]}}.options.scales);
		{{args['graphs'][-1]}}.options.scales.xAxes[0].display = true
		{{args['graphs'][-1]}}.update();
    		{% endif %}
        });
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    init();
    refresh();

    profile = function(profiles){
	
	enable_refresh = 0 
	for (const profile in profiles){
		
		sleep(100)
		console.log(profile)	
		$.get('/main/profile_enable/'.concat(profile))
		//clear_graphs(0);

        	{% if 'graphs' in args.keys() %}
        	{% for graph in args['graphs'] %}
        	var {{graph}}_ = 0
        	{% endfor %}
        	{% endif %}

        	{% if 'graphs' in args.keys() %}
        	{% for graph in args['graphs'] %}


		if (profile.includes("{{graph}}")){
        		add = $.extend( true, {}, zeroDataSet),
        		add.label = '{{graph}}_profile'
        		color = chartColors.{{graph}}[{{graph}}_]
        		add.backgroundColor = 'rgba(0,0,0,0)'
        		add.borderColor = color
        		add.pointBorderColor = color
        		add.pointBackgroundColor = color
        		add.fill = false
        		add.pointRadius = 0
        		add.outerGlowWidth = 40
        		add.outerGlowColor = color
        		add.shadowBlur = 10
        		add.shadowColor = color
        		add.borderDash = [10,5]
        		add.data = new Array({{graph}}.data.datasets[0].data.length).fill(0);
        		//console.log(add)

       		 	{{graph}}.data.datasets[{{graph}}_maintain + {{graph}}_] = (add)
        		{{graph}}.update();
			{{graph}}_ = {{graph}}_ + 1
		}

        	{% endfor %}
        	{% endif %}
	}
    enable_refresh = 1
    }


</script>

{% endblock %}
